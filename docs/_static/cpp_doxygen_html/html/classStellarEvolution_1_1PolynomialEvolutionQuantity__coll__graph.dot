digraph "StellarEvolution::PolynomialEvolutionQuantity"
{
 // INTERACTIVE_SVG=YES
  edge [fontname="Helvetica",fontsize="12",labelfontname="Helvetica",labelfontsize="12"];
  node [fontname="Helvetica",fontsize="12",shape=record];
  Node6 [label="{StellarEvolution::Polynomial\lEvolutionQuantity\n|- __poly_coef\l- __xmin\l- __xmax\l- __deriv_x\l- __empty_vector\l|+ PolynomialEvolutionQuantity()\l+ select_interpolation\l_region()\l+ operator()()\l+ range_low()\l+ range_high()\l+ discontinuities()\l+ previous_discontinuity()\l+ next_discontinuity()\l+ enable_next_interpolation\l_region()\l+ deriv()\l+ order()\l+ kind()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="12",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{StellarEvolution::Evolving\lStellarQuantity\n|+ method\l- __mass\l- __feh\l- __min_age\l- __max_age\l- __log_age\l- __log_quantity\l- __initially_zero\l- __track_masses\l- __track_feh\l- __min_interp_ages\land 14 more...\l|+ EvolvingStellarQuantity()\l+ EvolvingStellarQuantity()\l+ age()\l+ operator()()\l+ deriv()\l+ range_high()\l+ range_low()\l+ discontinuities()\l+ ages()\l# age_to_interp_param()\l# interp_param_to_age()\l- track_index()\l- track_in_range()\l- track_in_range()\l- check_grid_range()\l- find_cell()\l- set_interp_age_ranges()\l- evaluate_track()\l- check_grid_expansion\l_directions()\l- expand_grid()\l- update_interpolation_grid()\l- interpolate()\l- age_to_interp_param()\l- interp_param_to_age()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classStellarEvolution_1_1EvolvingStellarQuantity.html",tooltip="A class for stellar properties that depend on age. "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="12",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{Core::OneArgumentDiffFunction\n||+ deriv()\l+ ~OneArgumentDiffFunction()\l- serialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCore_1_1OneArgumentDiffFunction.html",tooltip="A class representing a once differentiable function of a single argument. "];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="12",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{Core::OneArgumentFunction\l\< double, double \>\n||+ operator()()\l+ range_high()\l+ range_low()\l+ crossings()\l+ ~OneArgumentFunction()\l- serialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCore_1_1OneArgumentFunction.html"];
  Node10 -> Node9 [dir="back",color="orange",fontsize="12",style="solid",label=" \< double, double \>" ,fontname="Helvetica"];
  Node10 [label="{Core::OneArgumentFunction\l\< InputDataType, OutputDataType \>\n||+ operator()()\l+ range_high()\l+ range_low()\l+ crossings()\l+ ~OneArgumentFunction()\l- serialize()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCore_1_1OneArgumentFunction.html",tooltip="The base class for functions which take a single argument and return a single value. "];
  Node11 -> Node6 [dir="back",color="firebrick4",fontsize="12",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{Core::FunctionDerivatives\n||+ order()\l+ ~FunctionDerivatives()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCore_1_1FunctionDerivatives.html",tooltip="A class representing arbitrary order derivatives of a function. "];
}
